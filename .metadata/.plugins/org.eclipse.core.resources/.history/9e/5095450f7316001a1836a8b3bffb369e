package it.project.server.mapper.object;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import it.project.server.model.Privilege;
import it.project.server.pojo.Address;
import it.project.server.pojo.User;

@Service
public class ModelToPojo implements ModelToPojoI {
	@Override
	public it.project.server.pojo.User convertUser(it.project.server.model.User model) {
		it.project.server.pojo.User pojo = new it.project.server.pojo.User();
		pojo.setId(model.getId());
		pojo.setNome(model.getNome());
		pojo.setCognome(model.getCognome());
		pojo.setPassword(model.getPassword());
		pojo.setSesso(model.getSesso());
		pojo.setDob(model.getDob());
		pojo.setTelefono(model.getTelefono());
		pojo.setUsername(model.getUsername());

		if (model.getPrivilege() != null)
			pojo.setPrivilege(convertPrivilege(model.getPrivilege()));

		if (model.getAddresses() != null)
			pojo.setAddresses(convertAddresses(model.getAddresses()));

		return pojo;
	}

	@Override
	public it.project.server.pojo.User convertAuthUser(it.project.server.model.User model) {
		it.project.server.pojo.User pojo = new it.project.server.pojo.User();

		pojo.setPassword(model.getPassword());
		pojo.setUsername(model.getUsername());

		if (model.getPrivilege() != null) {
			System.err.println("not null");
			System.err.println(model.getPrivilege().getId());
			pojo.setPrivilege(convertPrivilege(model.getPrivilege()));
		}

		return pojo;
	}

	@Override
	public List<it.project.server.pojo.User> convertUsers(List<it.project.server.model.User> model) {
		List<it.project.server.pojo.User> pojo = new ArrayList<it.project.server.pojo.User>();

		if (model != null) {
			model.stream().forEach(item -> pojo.add(convertUser(item)));
		}
		return pojo;
	}

	@Override
	public it.project.server.pojo.Privilege convertPrivilege(it.project.server.model.Privilege model) {
		it.project.server.pojo.Privilege pojo = new it.project.server.pojo.Privilege();
		pojo.setId(model.getId());
		pojo.setPrivilege(model.getPrivilege());

		return pojo;
	}

	@Override
	public it.project.server.pojo.Address convertAddress(it.project.server.model.Address model) {
		it.project.server.pojo.Address pojo = new it.project.server.pojo.Address();

		pojo.setId(model.getId());
		pojo.setVia(model.getVia());
		pojo.setCivico(model.getCivico());
		pojo.setCAP(model.getCAP());
		pojo.setResidenza(model.getResidenza());
		pojo.setUserId(model.getUserId());

		return pojo;
	}

	@Override
	public List<it.project.server.pojo.Address> convertAddresses(List<it.project.server.model.Address> model) {
		List<it.project.server.pojo.Address> pojo = new ArrayList<it.project.server.pojo.Address>();
		if (model != null) {
			model.stream().forEach(item -> pojo.add(convertAddress(item)));
		}
		return pojo;
	}

}
