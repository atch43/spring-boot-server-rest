package it.project.server.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.filter.OncePerRequestFilter;

public class AuthenticationFilter extends OncePerRequestFilter {

	@Autowired
	CustomTokenHandler customTokenHandler;

	public CustomTokenHandler getCustomTokenHandler() {
		return customTokenHandler;
	}

	public void setCustomTokenHandler(CustomTokenHandler customTokenHandler) {
		this.customTokenHandler = customTokenHandler;
	}

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
			throws ServletException, IOException {
		if (customTokenHandler == null) {
			ServletContext servletContext = request.getSession().getServletContext();
			WebApplicationContext webApplicationContext = WebApplicationContextUtils
					.getWebApplicationContext(servletContext);
			customTokenHandler = webApplicationContext.getBean(CustomTokenHandler.class);
		}

		String authToken = null;

		
		authToken = request.getHeader(SecurityConstants.TOKEN_HEADER);

		it.project.server.model.User user = null;
		if (authToken != null && customTokenHandler.validateToken(authToken.split(" ")[1])) {

			user = customTokenHandler.parseUserFromToken(authToken.split(" ")[1]);

			UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(user, null,
					null);
			authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
			SecurityContextHolder.getContext().setAuthentication(authentication);
			System.err.println("user-set "+user.getUsername());

		} else {
			SecurityContextHolder.getContext().setAuthentication(null);
		}

		chain.doFilter(request, response);
	}
}