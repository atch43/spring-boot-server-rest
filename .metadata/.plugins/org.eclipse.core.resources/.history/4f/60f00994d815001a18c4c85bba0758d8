package it.boot.client.security;


import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import it.project.server.model.AuthUser;
import it.project.server.services.UserIBLM;

@Service("customTokenHandler")
public class CustomTokenHandler {


	@Autowired
	UserIBLM userBLM;

	public CustomTokenHandler() {
    }

    public it.project.server.model.User parseUserFromToken(String token) {
        String username = Jwts.parser()
                .setSigningKey(SecurityConstants.JWT_SECRET)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();

		it.project.server.model.User res = pojoToModel.convertUser(userBLM.getUserByUsername(username));
        
//        res.setPrivileges(blmUser.getUserPrivilegesByEmail(email));
        return res;
    }

    public String createTokenForUser(AuthUser user) {
    	try {
        return Jwts.builder()
                .setHeaderParam("typ", SecurityConstants.TOKEN_TYPE)
                .setIssuer(SecurityConstants.TOKEN_ISSUER)
                .setAudience(SecurityConstants.TOKEN_AUDIENCE)
                .setSubject(user.getEmail())
                .setExpiration(new Date(System.currentTimeMillis() + 864000000))
                .signWith(SignatureAlgorithm.HS512, SecurityConstants.JWT_SECRET)
                .compact();
    	}
    	catch(Exception e) {
    		e.printStackTrace();
    		return "";
    	}
    }
    
    public boolean validateToken(String token) {
    	 try {
    	       Jws<Claims> jwt = Jwts.parser() 
    	                .setSigningKey(SecurityConstants.JWT_SECRET)
    	                .parseClaimsJws(token);
    	       return true;

    	    } catch (SignatureException e) {
    	        e.printStackTrace();
    	        return false;
    	     }
    }
}